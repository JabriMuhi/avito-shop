// Code generated by MockGen. DO NOT EDIT.
// Source: ./user_service.go

// Package mock_service is a generated GoMock package.
package mock_service

import (
	models "avito-shop/src/models"
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockuserGetter is a mock of userGetter interface.
type MockuserGetter struct {
	ctrl     *gomock.Controller
	recorder *MockuserGetterMockRecorder
}

// MockuserGetterMockRecorder is the mock recorder for MockuserGetter.
type MockuserGetterMockRecorder struct {
	mock *MockuserGetter
}

// NewMockuserGetter creates a new mock instance.
func NewMockuserGetter(ctrl *gomock.Controller) *MockuserGetter {
	mock := &MockuserGetter{ctrl: ctrl}
	mock.recorder = &MockuserGetterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockuserGetter) EXPECT() *MockuserGetterMockRecorder {
	return m.recorder
}

// GetUserByID mocks base method.
func (m *MockuserGetter) GetUserByID(ctx context.Context, id int64) (*models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByID", ctx, id)
	ret0, _ := ret[0].(*models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByID indicates an expected call of GetUserByID.
func (mr *MockuserGetterMockRecorder) GetUserByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByID", reflect.TypeOf((*MockuserGetter)(nil).GetUserByID), ctx, id)
}

// GetUserByName mocks base method.
func (m *MockuserGetter) GetUserByName(ctx context.Context, name string) (*models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByName", ctx, name)
	ret0, _ := ret[0].(*models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByName indicates an expected call of GetUserByName.
func (mr *MockuserGetterMockRecorder) GetUserByName(ctx, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByName", reflect.TypeOf((*MockuserGetter)(nil).GetUserByName), ctx, name)
}
