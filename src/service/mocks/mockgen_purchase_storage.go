// Code generated by MockGen. DO NOT EDIT.
// Source: ./purchase_service.go

// Package mock_service is a generated GoMock package.
package mock_service

import (
	avito "avito-shop/avito"
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockpurchaseStorage is a mock of purchaseStorage interface.
type MockpurchaseStorage struct {
	ctrl     *gomock.Controller
	recorder *MockpurchaseStorageMockRecorder
}

// MockpurchaseStorageMockRecorder is the mock recorder for MockpurchaseStorage.
type MockpurchaseStorageMockRecorder struct {
	mock *MockpurchaseStorage
}

// NewMockpurchaseStorage creates a new mock instance.
func NewMockpurchaseStorage(ctrl *gomock.Controller) *MockpurchaseStorage {
	mock := &MockpurchaseStorage{ctrl: ctrl}
	mock.recorder = &MockpurchaseStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockpurchaseStorage) EXPECT() *MockpurchaseStorageMockRecorder {
	return m.recorder
}

// BuyMerch mocks base method.
func (m *MockpurchaseStorage) BuyMerch(ctx context.Context, userID int64, merchName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BuyMerch", ctx, userID, merchName)
	ret0, _ := ret[0].(error)
	return ret0
}

// BuyMerch indicates an expected call of BuyMerch.
func (mr *MockpurchaseStorageMockRecorder) BuyMerch(ctx, userID, merchName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BuyMerch", reflect.TypeOf((*MockpurchaseStorage)(nil).BuyMerch), ctx, userID, merchName)
}

// GetPurchasedMerchByUserID mocks base method.
func (m *MockpurchaseStorage) GetPurchasedMerchByUserID(ctx context.Context, userID int64) ([]*avito.InventoryItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPurchasedMerchByUserID", ctx, userID)
	ret0, _ := ret[0].([]*avito.InventoryItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPurchasedMerchByUserID indicates an expected call of GetPurchasedMerchByUserID.
func (mr *MockpurchaseStorageMockRecorder) GetPurchasedMerchByUserID(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPurchasedMerchByUserID", reflect.TypeOf((*MockpurchaseStorage)(nil).GetPurchasedMerchByUserID), ctx, userID)
}
